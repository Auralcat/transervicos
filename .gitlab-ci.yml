# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/ruby/tags/
image: "ruby:2.6"

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - postgres:latest

# Cache gems in between builds
cache:
  paths:
    - vendor/ruby
stages:
  - build
  - test
  - code_review
  - deploy

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - ruby -v                                   # Print out ruby version for debugging
  # Uncomment next line if your rails app needs a JS runtime:
  - apt-get update -q && apt-get install nodejs cmake build-essential libpq-dev -yqq
  - apt-get install npm
  - npm install yarn --progress=false
  - cp config/database.yml.example config/database.yml
  - gem install bundler  # Bundler is not installed with the image
  - gem install pronto pronto-rubocop pronto-brakeman
  - bundle install -j $(nproc)  # Install dependencies into ./vendor/ruby

code_review:
  stage: code_review
  script:
  - rubocop --config .rubocop.yml
  - brakeman
  allow_failure: true

build:
  stage: build
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  script:
  - npm run build
  - rails db:create
  - rails db:migrate
  - rails db:seed

test:
  stage: test
  script:
  - rails db:test:prepare
  - rspec spec

# This deploy job uses a simple deploy flow to Heroku, other providers, e.g. AWS Elastic Beanstalk
# are supported too: https://github.com/travis-ci/dpl
deploy:
  stage: deploy
  environment: production
  script:
  - gem install dpl
  - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY
